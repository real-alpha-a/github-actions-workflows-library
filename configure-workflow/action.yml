name: Configure Workflow Environment

description: Action to configure the workflow environment

inputs:
  team:
    description: 'Project team name'
    required: true
  keysystem:
    description: 'Project KeySystem name'
    required: false
    default: 'aigi'
  application-name:
    description: 'Project application name'
    required: true
  docker-namespace:
    description: 'Project docker namespace'
    required: true
  artifactory-username:
    description: 'Artifactory username'
    required: true
  artifactory-api-key:
    description: 'Artifactory API key'
    required: true
  deployment-repo:
    description: 'Project GitOps deployment repository'
    required: true

outputs:
  artifactory-base:
    description: 'Artifactory base URL'
    value: ${{ steps.env.outputs.artifactory-base }}
  artifactory-username:
    description: 'Artifactory username'
    value: ${{ steps.env.outputs.artifactory-username }}
  artifactory-api-key:
    description: 'Artifactory API key'
    value: ${{ steps.env.outputs.artifactory-api-key }}
  debian-repository-url:
    description: 'Debian repository URL'
    value: ${{ steps.env.outputs.debian-repository-url }}
  docker-snapshot-image-base:
    description: 'Docker snapshot image base name'
    value: ${{ steps.env.outputs.docker-snapshot-image-base }}
  docker-release-image-base:
    description: 'Docker release image base name'
    value: ${{ steps.env.outputs.docker-release-image-base }}
  docker-registry:
    description: 'Docker registry'
    value: ${{ steps.env.outputs.docker-registry }}
  docker-ref-tag:
    description: 'Docker git reference tag'
    value: ${{ steps.env.outputs.docker-ref-tag }}
  docker-sha-tag:
    description: 'Docker git SHA tag'
    value: ${{ steps.env.outputs.docker-sha-tag }}
  docker-build-tag:
    description: 'Docker CI build tag'
    value: ${{ steps.env.outputs.docker-build-tag }}
  docker-label-keysystem:
    description: 'Docker label keysystem'
    value: ${{ steps.env.outputs.docker-label-keysystem }}
  helm-repository-url:
    description: 'Helm repository URL'
    value: ${{ steps.env.outputs.helm-repository-url }}
  maven-mirror-url:
    description: 'Maven mirror URL'
    value: ${{ steps.env.outputs.maven-mirror-url }}
  maven-snapshot-url:
    description: 'Maven snapshot repository URL'
    value: ${{ steps.env.outputs.maven-snapshot-url }}
  maven-release-url:
    description: 'Maven release repository URL'
    value: ${{ steps.env.outputs.maven-release-url }}
  npm-registry-url:
    description: 'Npm registry URL'
    value: ${{ steps.env.outputs.npm-registry-url }}
  npm-snapshot-url:
    description: 'Npm snapshot repository URL'
    value: ${{ steps.env.outputs.npm-snapshot-url }}
  npm-release-url:
    description: 'Npm release repository URL'
    value: ${{ steps.env.outputs.npm-release-url }}
  nuget-repository-url:
    description: 'NuGet repository URL'
    value: ${{ steps.env.outputs.nuget-repository-url }}
  nuget-repository-url_v3:
    description: 'NuGet repository URL'
    value: ${{ steps.env.outputs.nuget-repository-url_v3 }}
  pypi-index-url:
    description: 'PyPi index URL'
    value: ${{ steps.env.outputs.pypi-index-url }}
  pypi-snapshot-url:
    description: 'PyPi snapshot repository URL'
    value: ${{ steps.env.outputs.pypi-snapshot-url }}
  pypi-release-url:
    description: 'PyPi release repository URL'
    value: ${{ steps.env.outputs.pypi-release-url }}

runs:
  using: composite
  steps:
    - name: Configure Workflow Environment
      id: env
      shell: bash
      env:
        TEAM: ${{ inputs.team }}
        KEYSYSTEM: ${{ inputs.keysystem }}
        APPLICATION_NAME: ${{ inputs.application-name }}
        DOCKER_NAMESPACE: ${{ inputs.docker-namespace }}
        ARTIFACTORY_USERNAME: ${{ inputs.artifactory-username }}
        ARTIFACTORY_API_KEY: ${{ inputs.artifactory-api-key }}
        DEPLOYMENT_REPO: ${{ inputs.deployment-repo }}
      run: |
        # Artifactory
        ARTIFACTORY_BASE="trialt6dmgx.jfrog.io"
        ARTIFACTORY_BASE_URL="https://${ARTIFACTORY_BASE}/artifactory"
        echo "DEBUG: ARTIFACTORY_BASE_URL=${ARTIFACTORY_BASE_URL}"
        echo "artifactory-base=${ARTIFACTORY_BASE}" >> "$GITHUB_OUTPUT"
        echo "artifactory-username=$ARTIFACTORY_USERNAME" >> "$GITHUB_OUTPUT"
        echo "artifactory-api-key=$ARTIFACTORY_API_KEY" >> "$GITHUB_OUTPUT"

        # Debian
        DEBIAN_REPO_URL="${ARTIFACTORY_BASE_URL}/${TEAM}-debian-dev"
        echo "DEBUG: DEBIAN_REPO_URL=${DEBIAN_REPO_URL}"
        echo "debian-repository-url=${DEBIAN_REPO_URL}" >> "$GITHUB_OUTPUT"

        # Docker
        DOCKER_SNAPSHOT_IMAGE_BASE="$ARTIFACTORY_BASE/$TEAM-docker-snapshot-local/$DOCKER_NAMESPACE/$APPLICATION_NAME"
        DOCKER_RELEASE_IMAGE_BASE="$ARTIFACTORY_BASE/$TEAM-docker-release-local/$DOCKER_NAMESPACE/$APPLICATION_NAME"
        DOCKER_REGISTRY="$ARTIFACTORY_BASE/$TEAM-docker-dev"
        echo "DEBUG: DOCKER_SNAPSHOT_IMAGE_BASE=${DOCKER_SNAPSHOT_IMAGE_BASE}"
        echo "DEBUG: DOCKER_RELEASE_IMAGE_BASE=${DOCKER_RELEASE_IMAGE_BASE}"
        echo "DEBUG: DOCKER_REGISTRY=${DOCKER_REGISTRY}"
        echo "docker-snapshot-image-base=$DOCKER_SNAPSHOT_IMAGE_BASE" >> "$GITHUB_OUTPUT"
        echo "docker-release-image-base=$DOCKER_RELEASE_IMAGE_BASE" >> "$GITHUB_OUTPUT"
        echo "docker-registry=$DOCKER_REGISTRY" >> "$GITHUB_OUTPUT"

        # Helm
        HELM_REPOSITORY_URL="$ARTIFACTORY_BASE_URL/$TEAM-helm-dev"
        echo "DEBUG: HELM_REPOSITORY_URL=${HELM_REPOSITORY_URL}"
        echo "helm-repository-url=$HELM_REPOSITORY_URL" >> "$GITHUB_OUTPUT"

        # Maven
        MAVEN_SNAPSHOT_URL="$ARTIFACTORY_BASE_URL/$TEAM-maven-snapshot-local/"
        MAVEN_RELEASE_URL="$ARTIFACTORY_BASE_URL/$TEAM-maven-release-local/"
        MAVEN_MIRROR_URL="$ARTIFACTORY_BASE_URL/$TEAM-maven-dev"
        echo "DEBUG: MAVEN_SNAPSHOT_URL=${MAVEN_SNAPSHOT_URL}"
        echo "DEBUG: MAVEN_RELEASE_URL=${MAVEN_RELEASE_URL}"
        echo "DEBUG: MAVEN_MIRROR_URL=${MAVEN_MIRROR_URL}"
        echo "maven-snapshot-url=$MAVEN_SNAPSHOT_URL" >> "$GITHUB_OUTPUT"
        echo "maven-release-url=$MAVEN_RELEASE_URL" >> "$GITHUB_OUTPUT"
        echo "maven-mirror-url=$MAVEN_MIRROR_URL" >> "$GITHUB_OUTPUT"

        # GIT_REF Handling
        case $GITHUB_EVENT_NAME in
          pull_request)
            GIT_REF=$GITHUB_BASE_REF
            echo "DEBUG: Pull request detected, GIT_REF=${GIT_REF}"
            ;;
          *)
            case $GITHUB_REF in
              refs/tags/v*)
                GIT_REF=${GITHUB_REF#refs/tags/v}
                echo "DEBUG: Tag reference detected, GIT_REF=${GIT_REF}"
                ;;
              refs/heads/*)
                GIT_REF=${GITHUB_REF#refs/heads/}
                echo "DEBUG: Branch reference detected, GIT_REF=${GIT_REF}"
                ;;
              *)
                echo "ERROR: Unhandled GITHUB_REF=$GITHUB_REF, exiting"
                exit 1
                ;;
            esac
            ;;
        esac

        # Docker Tags
        DOCKER_REF_TAG="${GIT_REF//[\/]/-}"
        echo "DEBUG: DOCKER_REF_TAG=${DOCKER_REF_TAG}"
        DOCKER_SHA_TAG="${GITHUB_SHA:0:7}"
        echo "DEBUG: DOCKER_SHA_TAG=${DOCKER_SHA_TAG}"
        DOCKER_BUILD_TAG="$DOCKER_REF_TAG-$DOCKER_SHA_TAG-$(date +%Y%m%d)-$GITHUB_RUN_NUMBER"
        echo "DEBUG: DOCKER_BUILD_TAG=${DOCKER_BUILD_TAG}"
        echo "docker-ref-tag=$DOCKER_REF_TAG" >> "$GITHUB_OUTPUT"
        echo "docker-sha-tag=$DOCKER_SHA_TAG" >> "$GITHUB_OUTPUT"
        echo "docker-build-tag=$DOCKER_BUILD_TAG" >> "$GITHUB_OUTPUT"

        # Handle KEYSYSTEM
        [ -z "$KEYSYSTEM" ] && KEYSYSTEM='aigi'
        echo "DEBUG: KEYSYSTEM=${KEYSYSTEM}"
        echo "docker-label-keysystem=$KEYSYSTEM" >> "$GITHUB_OUTPUT"